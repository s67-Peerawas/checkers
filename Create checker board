import tkinter as tk
from tkinter import messagebox, filedialog

class Checkers:
    def __init__(self, master):
        self.master = master
        self.master.title("Checkers")
        self.canvas = tk.Canvas(master, width=640, height=640)
        self.canvas.pack()

        self.save_button = tk.Button(master, text="Save Game", command=self.save_game)
        self.save_button.pack(side=tk.LEFT)

        self.load_button = tk.Button(master, text="Load Game", command=self.load_game)
        self.load_button.pack(side=tk.LEFT)

        self.board = self.create_board()
        self.current_player = 'white'  
        self.selected_piece = None
        self.valid_moves = []
        self.turn_label = tk.Label(master, text=f"Current Turn: {self.current_player}", font=("Arial", 16))
        self.turn_label.pack()

        self.draw_board()
        self.draw_pieces()
        self.canvas.bind("<Button-1>", self.on_click)

    def create_board(self):
        board = [[None for _ in range(8)] for _ in range(8)]
        for row in range(3):
            for col in range((row % 2), 8, 2):
                board[row][col] = 'black'  
        for row in range(5, 8):
            for col in range((row % 2), 8, 2):
                board[row][col] = 'white' 
        return board

    def save_game(self):
        save_data = []
        for row in self.board:
            save_row = []
            for piece in row:
                if piece is None:
                    save_row.append("0")
                elif piece == 'white':
                    save_row.append("1")
                elif piece == 'black':
                    save_row.append("2")
                elif piece == 'white_king':
                    save_row.append("k1")
                elif piece == 'black_king':
                    save_row.append("k2")
            save_data.append(" ".join(save_row))

        save_text = "\n".join(save_data)

        with open("Checker_save.txt", "w") as file:
            file.write(save_text)

        messagebox.showinfo("Save Game", "Game saved successfully!")

    def load_game(self):
        try:
            with open("Checker_save.txt", "r") as file:
                save_data = file.readlines()

            for row, line in enumerate(save_data):
                pieces = line.strip().split(" ")
                for col, piece in enumerate(pieces):
                    if piece == "0":
                        self.board[row][col] = None
                    elif piece == "1":
                        self.board[row][col] = 'white'
                    elif piece == "2":
                        self.board[row][col] = 'black'
                    elif piece == "k1":
                        self.board[row][col] = 'white_king'
                    elif piece == "k2":
                        self.board[row][col] = 'black_king'

            self.draw_pieces()
            messagebox.showinfo("Load Game", "Game loaded successfully!")
        except FileNotFoundError:
            messagebox.showwarning("Load Game", "No saved game found!")

    def draw_board(self):
        for row in range(8):
            for col in range(8):
                color = "#D18B47" if (row + col) % 2 == 0 else "#FFCE9E"
                self.canvas.create_rectangle(col * 80, row * 80, (col + 1) * 80, (row + 1) * 80, fill=color)

    def draw_pieces(self):
        self.canvas.delete("pieces")
        for row in range(8):
            for col in range(8):
                piece = self.board[row][col]
                if piece == 'black':
                    self.draw_piece(row, col, "black")
                elif piece == 'white':
                    self.draw_piece(row, col, "white")
                elif piece == 'black_king':
                    self.draw_piece(row, col, "black", is_king=True)
                elif piece == 'white_king':
                    self.draw_piece(row, col, "white", is_king=True)

    def draw_piece(self, row, col, color, is_king=False):
        x_center = col * 80 + 40
        y_center = row * 80 + 40
        self.canvas.create_oval(
            x_center - 30, y_center - 30,
            x_center + 30, y_center + 30,
            fill=color, tags=("pieces", f"{color}_{row}_{col}")
        )
        if is_king:
            self.canvas.create_text(x_center, y_center, text='K', font=("Arial", 24, "bold"), fill="yellow", tags="pieces")

    def on_click(self, event):
        col = event.x // 80
        row = event.y // 80

        if self.selected_piece:
            if (row, col) in self.valid_moves:
                self.move_piece(self.selected_piece, (row, col))
                self.selected_piece = None
                self.valid_moves = []
                self.clear_highlight() 
                if self.check_winner():
                    return  
                self.switch_player()
            else:
                self.selected_piece = None
                self.valid_moves = []
                self.clear_highlight() 
        else:
            piece = self.board[row][col]
            if (piece == 'white' and self.current_player == 'white') or (piece == 'black' and self.current_player == 'black'):
                self.selected_piece = (row, col)
                self.valid_moves = self.get_valid_moves(row, col)
                self.highlight_valid_moves()
            elif (piece == 'white_king' and self.current_player == 'white') or (piece == 'black_king' and self.current_player == 'black'):
                self.selected_piece = (row, col)
                self.valid_moves = self.get_valid_moves(row, col)
                self.highlight_valid_moves()

    def get_valid_moves(self, row, col):
        moves = []
        piece_color = self.board[row][col]
        is_king = piece_color.endswith('_king')

        if piece_color.startswith('white'):
            directions = [(-1, -1), (-1, 1)]  
        else:
            directions = [(1, -1), (1, 1)] 

        if is_king:
            directions.extend([(1, -1), (1, 1), (-1, -1), (-1, 1)]) 

        for dr, dc in directions:
            new_row, new_col = row + dr, col + dc
            if 0 <= new_row < 8 and 0 <= new_col < 8 and self.board[new_row][new_col] is None:
                moves.append((new_row, new_col))

        for dr, dc in directions:
            new_row, new_col = row + dr * 2, col + dc * 2
            mid_row, mid_col = row + dr, col + dc
            if (0 <= new_row < 8 and 0 <= new_col < 8 and
                self.board[new_row][new_col] is None and
                mid_row >= 0 and mid_row < 8 and mid_col >= 0 and mid_col < 8 and 
                self.board[mid_row][mid_col] is not None and
                self.board[mid_row][mid_col] != piece_color): 
                moves.append((new_row, new_col))

        return moves

    def highlight_valid_moves(self):
        for move in self.valid_moves:
            row, col = move
            x1, y1 = col * 80, row * 80  
            x2, y2 = (col + 1) * 80, (row + 1) * 80  
            self.canvas.create_rectangle(
                x1, y1, x2, y2,
                fill="green", stipple="gray25", outline="",
                tags="highlight"
            )

    def clear_highlight(self):
        self.canvas.delete("highlight")

    def move_piece(self, start, end):
        s_row, s_col = start
        e_row, e_col = end
        self.board[e_row][e_col] = self.board[s_row][s_col] 
        self.board[s_row][s_col] = None  

        if abs(s_row - e_row) == 2:
            mid_row = (s_row + e_row) // 2
            mid_col = (s_col + e_col) // 2
            captured_piece = self.board[mid_row][mid_col]

            if captured_piece is not None and captured_piece != self.board[s_row][s_col]:
                self.board[mid_row][mid_col] = None  

        if e_row == 0 and self.board[e_row][e_col] == 'white':
            self.board[e_row][e_col] = 'white_king'
        elif e_row == 7 and self.board[e_row][e_col] == 'black':
            self.board[e_row][e_col] = 'black_king'

        self.draw_pieces()
        self.turn_label.config(text=f"Current Turn: {self.current_player}")

    def switch_player(self):
        self.current_player = 'black' if self.current_player == 'white' else 'white'
        self.turn_label.config(text=f"Current Turn: {self.current_player}")

    def check_winner(self):
        white_count = sum(row.count('white') + row.count('white_king') for row in self.board)
        black_count = sum(row.count('black') + row.count('black_king') for row in self.board)

        if white_count == 0:
            self.show_winner("Black wins!")
            return True
        elif black_count == 0:
            self.show_winner("White wins!")
            return True
        return False

    def show_winner(self, winner):
        messagebox.showinfo("Game Over", winner)
        self.reset_game()

    def reset_game(self):
        self.board = self.create_board()
        self.current_player = 'white'
        self.selected_piece = None
        self.valid_moves = []
        self.clear_highlight()
        self.draw_board()
        self.draw_pieces()
        self.turn_label.config(text=f"Current Turn: {self.current_player}")

if __name__ == "__main__":
    root = tk.Tk()
    game = Checkers(root)
    root.mainloop()
