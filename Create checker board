import tkinter as tk

selected_piece = None
board = None

def create_board(canvas, rows, cols, square_size):
    colors = ["#D18B47", "#FFCE9E"] 
    for row in range(rows):
        for col in range(cols):
            color = colors[(row + col) % 2]
            x1 = col * square_size
            y1 = row * square_size
            x2 = x1 + square_size
            y2 = y1 + square_size
            canvas.create_rectangle(x1, y1, x2, y2, fill=color, outline="black")

def create_pieces(canvas, board, rows, cols, square_size):
    piece_radius = square_size // 2 - 10 

    for row in range(rows):
        for col in range(cols):
            if (row + col) % 2 == 0:  
                if row < 3:  
                    board[row][col] = "black"
                    draw_piece(canvas, row, col, square_size, piece_radius, "black")
                elif row > 4:  
                    board[row][col] = "white"
                    draw_piece(canvas, row, col, square_size, piece_radius, "white")

def draw_piece(canvas, row, col, square_size, radius, color):
    x_center = col * square_size + square_size // 2
    y_center = row * square_size + square_size // 2
    piece = canvas.create_oval(
        x_center - radius, y_center - radius,
        x_center + radius, y_center + radius,
        fill=color, tags=("piece", f"piece_{row}_{col}")
    )
    canvas.tag_bind(piece, "<Button-1>", lambda event, r=row, c=col: piece_clicked(event, r, c, canvas, square_size))

def piece_clicked(event, row, col, canvas, square_size):
    global selected_piece
    if board[row][col] is None:
        return  
    clear_highlights(canvas)  
    selected_piece = (row, col) 
    possible_moves = calculate_possible_moves(row, col)  
    highlight_moves(canvas, possible_moves, square_size)  
def calculate_possible_moves(row, col):
    moves = []
    piece_color = board[row][col]
    if piece_color == "black":  
        directions = [(1, -1), (1, 1)]
    elif piece_color == "white":  
        directions = [(-1, -1), (-1, 1)]
    else:
        directions = []

    for dr, dc in directions:
        new_row, new_col = row + dr, col + dc
        if 0 <= new_row < 8 and 0 <= new_col < 8:
            if board[new_row][new_col] is None:
                moves.append((new_row, new_col))
    return moves

def highlight_moves(canvas, moves, square_size):
    for move in moves:
        row, col = move
        x1 = col * square_size
        y1 = row * square_size
        x2 = x1 + square_size
        y2 = y1 + square_size
        highlight = canvas.create_rectangle(
            x1, y1, x2, y2,
            fill="green", stipple="gray25", outline="",
            tags="highlight"
        )
        canvas.tag_bind(highlight, "<Button-1>", lambda event, r=row, c=col, cs=square_size: move_piece(r, c, canvas, cs))

def move_piece(row, col, canvas, square_size):
    global selected_piece, board
    if selected_piece:
        old_row, old_col = selected_piece

        if (row, col) == (old_row, old_col):
            clear_highlights(canvas)
            selected_piece = None
            return

        piece_color = board[old_row][old_col]
        board[old_row][old_col] = None
        board[row][col] = piece_color

        clear_square(canvas, old_row, old_col, square_size)

        clear_square(canvas, row, col, square_size)

        draw_piece(canvas, row, col, square_size, square_size // 2 - 10, piece_color)

        clear_highlights(canvas)  
        selected_piece = None 

def clear_square(canvas, row, col, square_size):
    x1 = col * square_size
    y1 = row * square_size
    x2 = x1 + square_size
    y2 = y1 + square_size
    items = canvas.find_enclosed(x1, y1, x2, y2)
    for item in items:
        if "piece" in canvas.gettags(item):
            canvas.delete(item)
    base_color = "#D18B47" if (row + col) % 2 == 0 else "#FFCE9E"
    canvas.create_rectangle(x1, y1, x2, y2, fill=base_color, outline="black")

def clear_highlights(canvas):
    canvas.delete("highlight")

def main():
    global board
    window = tk.Tk()
    window.title("Checkers with Movable Pieces")

    board_size = 8
    square_size = 60

    board = [[None for _ in range(board_size)] for _ in range(board_size)]

    canvas = tk.Canvas(
        window,
        width=board_size * square_size,
        height=board_size * square_size
    )
    canvas.pack()

    create_board(canvas, board_size, board_size, square_size)

    create_pieces(canvas, board, board_size, board_size, square_size)

    window.mainloop()

if __name__ == "__main__":
    main()

    window.mainloop()

if __name__ == "__main__":
    main()
